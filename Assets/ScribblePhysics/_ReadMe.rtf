{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19020\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs24 \cf0 \ul \ulc0 Scribble Physics (v1.5)
\b0 \ulnone \
\

\b This asset dates from before Unity\'92s excellent 2D solution. \
Therefor, this asset still uses a 2.5D technique, where a adequate 2D solution would be preferable.\
Development on this asset has been frozen, though. \
I may, or may not, update this asset in the future, to make it compatible with Unity\'92s 2D physics engine.\
Until that time, this asset is provided to all users of unity for free, without support.
\b0 \
\
\ul Quickstart:\ulnone \
\
1) Create a new scene\
\
2) Add "ScribblePhysicsMainScript" to this scene, preferably to the Main Camera. This camera should use an orthographic projection.\
\
3) Set all necessary variables for the script:\
\pard\pardeftab720
\
 	* Rect canvasRect\
	 'canvasRect' holds the rect that defines the drawing canvas.\
	 rect-sizes will be interpreted as relative screen-sizes\
	 e.g.: \
	 Rect(0,0,1,1) --> use the entire screen\
	 Rect(0,0,1,0.5) --> use the bottom half of the screen\
	 Rect(0,0,0.5,1) --> use the right half of the screen\
\
	 * Camera mainCamera\
	 The GameObject that holds the main camera.\
	 If this variable is left empty, than it is assumed that\
	 main camera is attached to the current gameObject\
\
	 * float cameraOrthographicSize\
	 The main camera will be put in orthographic view. \
	 The (initial) size of this view can be set through this variable\
 \
	 * float drawDistanceFromCamera\
	 The drawing distance from the camera.\
\
	 * float lineWidth\
	 All new scribbles will be drawn using this width\
\
	 * float lineDepth\
	 All new scribbles will be draw using this depth value. \
	 Usually it won't be necessary to change this value\
\
	 * float density\
	 Bigger scribbles will have a bigger mass.\
	 The density is used to calculate this mass.\
\
 	* Material textureMaterial\
 	The texture material to be used.\
\
 	* PhysicMaterial physicsMaterial\
 	the physics material to be used\
\
 	* bool scribbleIsDynamic\
 	'true': New scribbles will be dynamic, e.g. obey laws of gravity\
	 'false' (default): New scribbles will be static\
\
 	* bool intersectionAllowed\
	 'true': Each new scribble can be drawn right through all other \
		objects in the scene. This can result in unpredictable \
		and unrealistic behaviour from unity's physics engine.\
 	'false' (default): Each new scribble can not intersect with other\
		objects in the scene. Hitting an object will terminate \
		drawing mode and the scribble will be finalized.\
\
 	* bool smoothScribble\
		'true' (default): The scribble will be smoothed after completion\
		'false': The scribble will not be smoothed after completion\
	\
4) The basic setup is now done: Run your scene and start drawing. Each time you press the mouse button (or touch the screen on a mobile device), a new object will be created, and the "ScribblePhysicsObjectScript" that has been attached to this object will take over the drawing process. \
\
5) If you want to change the drawing mode, textures or physics material, you can do so by changing the properties inside the inspector window.\
Or more conveniently, you could use an external script to do all the changing for you (The "ScribblePhysicsGUIScript" is a good example of this :-)\
\
	a) create a new script. The code below is c#\
	b) define \cf0 a new variable that refers to the ScribblePhysicsMainScript:\
		SPMS = gameObjectThatHoldsTheMainScript.GetComponent<ScribblePhysicsMainScript>();\cf0 \
	c) all settings that defines new scribbles can now be accessed/changed as follows\
		SPMS.lineWidth = 0.6;\
		SPMS.physicsMaterial = userDefinedPhysicsMaterial;\
		etc. \
}